import { NodeVersion } from '../types';
export type NodeVersionMajor = ReturnType<typeof getOptions>[number]['major'];
declare function getOptions(): readonly [{
    readonly major: 20;
    readonly range: "20.x";
    readonly runtime: "nodejs20.x";
}, {
    readonly major: 18;
    readonly range: "18.x";
    readonly runtime: "nodejs18.x";
}, {
    readonly major: 16;
    readonly range: "16.x";
    readonly runtime: "nodejs16.x";
    readonly discontinueDate: Date;
}, {
    readonly major: 14;
    readonly range: "14.x";
    readonly runtime: "nodejs14.x";
    readonly discontinueDate: Date;
}, {
    readonly major: 12;
    readonly range: "12.x";
    readonly runtime: "nodejs12.x";
    readonly discontinueDate: Date;
}, {
    readonly major: 10;
    readonly range: "10.x";
    readonly runtime: "nodejs10.x";
    readonly discontinueDate: Date;
}, {
    readonly major: 8;
    readonly range: "8.10.x";
    readonly runtime: "nodejs8.10";
    readonly discontinueDate: Date;
}];
export declare function getAvailableNodeVersions(): NodeVersionMajor[];
export declare function getLatestNodeVersion(availableVersions?: NodeVersionMajor[]): {
    readonly major: 20;
    readonly range: "20.x";
    readonly runtime: "nodejs20.x";
} | {
    readonly major: 18;
    readonly range: "18.x";
    readonly runtime: "nodejs18.x";
} | {
    readonly major: 16;
    readonly range: "16.x";
    readonly runtime: "nodejs16.x";
    readonly discontinueDate: Date;
} | {
    readonly major: 14;
    readonly range: "14.x";
    readonly runtime: "nodejs14.x";
    readonly discontinueDate: Date;
} | {
    readonly major: 12;
    readonly range: "12.x";
    readonly runtime: "nodejs12.x";
    readonly discontinueDate: Date;
} | {
    readonly major: 10;
    readonly range: "10.x";
    readonly runtime: "nodejs10.x";
    readonly discontinueDate: Date;
} | {
    readonly major: 8;
    readonly range: "8.10.x";
    readonly runtime: "nodejs8.10";
    readonly discontinueDate: Date;
};
export declare function getDiscontinuedNodeVersions(): NodeVersion[];
export declare function getSupportedNodeVersion(engineRange: string | undefined, isAuto?: boolean, availableVersions?: NodeVersionMajor[]): Promise<NodeVersion>;
export {};
